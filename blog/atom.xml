<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hpcdoc.pages.hpcer.dev/cluster-docs/blog</id>
    <title>HPCer Clusters Document Blog</title>
    <updated>2020-12-16T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://hpcdoc.pages.hpcer.dev/cluster-docs/blog"/>
    <subtitle>HPCer Clusters Document Blog</subtitle>
    <icon>https://hpcdoc.pages.hpcer.dev/cluster-docs/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[如何在超算上配置Spack]]></title>
        <id>one-spack-on-supercomputers</id>
        <link href="https://hpcdoc.pages.hpcer.dev/cluster-docs/blog/one-spack-on-supercomputers"/>
        <updated>2020-12-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[实验室集群文档介绍了如何配置、使用 Spack。本文用具体的例子来演示如何在超算上配置 Spack，主要内容如下：]]></summary>
        <content type="html"><![CDATA[<p>实验室集群文档介绍了如何配置、使用 Spack。本文用具体的例子来演示如何在超算上配置 Spack，主要内容如下：</p><ul><li>准备必要的数据</li><li>配置 Spack，修改配置文件</li><li>添加编译器和外部软件包</li><li>自定义软件包，安装软件包</li><li>导出模块文件</li><li>使用新安装的软件包</li></ul><p>本文涉及的所有内容基本都包含在实验室集群文档和 Spack 官方文档中，因此不再专门给出链接。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="超算环境说明">超算环境说明<a class="hash-link" href="#超算环境说明" title="Direct link to heading">​</a></h2><p>为了便于叙述，我们假定超算的相关参数、环境如下：</p><table><thead><tr><th>参数名</th><th>值</th></tr></thead><tbody><tr><td>名称</td><td>S</td></tr><tr><td>架构</td><td>x86_64</td></tr><tr><td>操作系统</td><td>CentOS 7</td></tr><tr><td>模块系统</td><td>Environment Modules</td></tr><tr><td>作业调度系统</td><td>Slurm</td></tr><tr><td>已有模块</td><td><code>compiler/gcc/10.2.0</code><br><code>mpi/hpcx/2.5</code><br><code>tools/cmake/3.19.3</code></td></tr></tbody></table><h2 class="anchor anchorWithStickyNavbar_mojV" id="拷贝必要数据">拷贝必要数据<a class="hash-link" href="#拷贝必要数据" title="Direct link to heading">​</a></h2><p>按照实验室集群文档中的说明，我们在超算 S 上建立如下几个目录并拷贝相应数据：</p><ul><li><code>~/public/spack</code>：存放 Spack 仓库</li><li><code>~/public/repos/spack</code>：Spack repos，可能有多个子目录，存放我们自定义的软件包配置文件（<code>package.py</code>）</li><li><code>~/public/sources/spack</code>：Spack mirror，存放所有软件包的源代码</li><li><code>~/public/software/spack</code>：Spack 软件安装路径，最初为空目录</li><li><code>~/.spack</code>：Spack 配置文件、缓存路径，由 Spack 自动创建</li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="配置-spack-的环境">配置 Spack 的环境<a class="hash-link" href="#配置-spack-的环境" title="Direct link to heading">​</a></h2><p>数据准备完成后，创建一个脚本方便我们启用 Spack，下面以 Bash 为例。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># Script: setup-spack.sh</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">SPACK_ROOT</span><span class="token operator" style="color:#393A34">=</span><span class="token environment constant" style="color:#36acaa">$HOME</span><span class="token plain">/public/spack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token builtin class-name">source</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$SPACK_ROOT</span><span class="token plain">/share/spack/setup-env.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>随后，我们先申请一个计算节点，后续操作都在计算节点上完成。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 申请计算节点</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ salloc -N </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> --exclusive -J spack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 假设分配的节点名为n0001，连接到该节点上</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> n0001</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 设置环境变量</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">source</span><span class="token plain"> ./setup-spack.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><div class="admonition admonition-note alert alert--secondary"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</h5></div><div class="admonition-content"><p>使用 Spack 之前，最好确保系统上有 Python 3.x。</p></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="修改配置文件中的路径">修改配置文件中的路径<a class="hash-link" href="#修改配置文件中的路径" title="Direct link to heading">​</a></h2><p>首先，我们要修改软件安装路径、mirror 路径和 repo 路径。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 修改软件安装路径</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack config edit config</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">config:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  install_tree:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    root: ~/public/software/spack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 增加优先搜索的 mirror 路径（针对不能联网的机器）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack config edit mirrors</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mirrors:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cluster-public: file://~/public/sources/spack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 增加优先搜索的 repo 路径，如果拷贝自实验室集群，要增加 2 行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack config edit repos</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">repos:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - ~/public/repos/spack/hpcde</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  - ~/public/repos/spack/flipped</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="添加编译器">添加编译器<a class="hash-link" href="#添加编译器" title="Direct link to heading">​</a></h2><p>超算 S 上有系统自带的编译器，位于 <code>/usr</code> 路径。其他编译器都由管理员安装在别的路径，要用 <code>module load</code> 加载。我们首先加载编译器，再让 Spack 来搜索。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 加载超算上常用的编译器</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ module load compiler/gcc/10.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 查找编译器并添加到配置文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack compiler </span><span class="token function" style="color:#d73a49">find</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 清空环境，防止干扰后续操作</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ module purge</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>执行完成后，应该会有至少一个编译器被添加到 <code>compilers.yaml</code> 文件中，我们可以去掉系统自带的低版本编译器，只保留刚刚加载的那个。</p><p>超算 S 上的编译器可能需要一些额外的环境变量、flags 之类，我们有必要检查一下原本的模块文件。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ module show compiler/gcc/10.2.0</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>若的确存在环境变量、flags，我们要把它们添加到 <code>compilers.yaml</code> 的<code>environment</code> 和 <code>flags</code> 这两个字典中。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 编辑配置文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack config edit compilers</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 若配置文件为空白，可能是scope的优先级有影响，可以指定scope</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># spack config --scope user compilers</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="添加外部软件包">添加外部软件包<a class="hash-link" href="#添加外部软件包" title="Direct link to heading">​</a></h2><p>超算 S 上有一些软件是我们无法自己安装的，例如：</p><ul><li><code>/usr</code> 目录下的软件。它们可能是其他软件的依赖项，不能随意替换；</li><li><code>CUDA</code>、<code>ROCM</code> 等平台相关的软件。它们的安装涉及硬件型号、驱动版本，自己安装非常麻烦；</li><li><code>PGI</code> 等编译器，或 <code>intel</code>、<code>hpcx</code> 等 MPI 实现。它们都是商用软件，并且可能由管理员微调过。</li></ul><p>总之，和硬件关系比较密切的软件都是我们要避免重新安装的，只能把它们当作外部软件包。</p><p>添加外部软件包时，要注意用 <code>module show</code> 来查看模块文件的配置，确定一个软件有哪些依赖、环境变量需要设置。根据我们假想的超算 S 配置，外部软件包大概有以下几个：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ spack config edit packages</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">packages:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gcc:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: gcc@10.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      modules:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - compiler/gcc/10.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  mpi:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  hpcx:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: hpcx@2.5%gcc@10.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      modules:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - compiler/gcc/10.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - mpi/hpcx/2.5</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  cmake:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: cmake@3.19.3%gcc@10.2.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      modules:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - tools/cmake/3.19.3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  gettext:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: gettext@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  curl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: curl@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  numactl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: numactl@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  autoconf:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: autoconf@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  automake:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: automake@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  libtool:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: libtool@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  perl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: perl@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  openssl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: openssl@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  openssh:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: openssh@system</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  binutils:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    buildable: </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    externals:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    - spec: binutils@system+ld+libiberty~nls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      prefix: /usr</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>从这个配置中我们可以看到，有一些是我们用 <code>modules</code> 配置的，其他都是我们从 <code>/usr</code> 路径里找的。在 <code>/usr</code> 路径里的这些都是一些我们没有必要自己安装，或者自己安装容易出错的软件，例如：</p><ul><li><code>curl</code>、<code>autoconf</code>、<code>automake</code>、<code>libtool</code>、<code>perl</code> 都是比较基本的开发工具，不需要很新的版本；</li><li><code>gettext</code> 是用于本地化的软件，自己安装可能会有问题；</li><li><code>openssl</code> 是系统的 SSL 软件，自己安装可能会有问题；</li><li><code>binutils</code> 是基本的 GNU 开发工具，包括 <code>ld</code>、<code>ar</code> 等，自己安装可能会与超算上其他软件冲突。在这里为了便于叙述我们直接给定为 <code>system</code>，但通常我们应该给定版本号让其他软件包能正常安装。</li></ul><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>缺失的软件包</h5></div><div class="admonition-content"><p>目前的 Spack 版本（0.16.0）不包含 <code>hpcx</code> 这个软件包，我们可以自定义一个简单的 <code>hpcx</code> 来用。详见本文后续说明。</p></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="安装新的软件包">安装新的软件包<a class="hash-link" href="#安装新的软件包" title="Direct link to heading">​</a></h2><p>外部软件包配置完成后，我们已经具备安装新软件的所有条件了。接下来，我们用一个脚本来批量安装如下软件：</p><ul><li><code>netcdf-cxx4@4.3.1</code></li><li><code>petsc@3.14.1</code></li><li><code>python@3.7.9</code></li><li><code>py-numpy@1.19.4</code></li><li><code>scorep@6.0</code></li></ul><p>在安装它们的过程中，还会相应地安装许多依赖。在下面的脚本中，我们把各类不同的软件包都区分出来，分别安装。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 外部软件包，列出来便于我们在有问题时针对性地调整</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">externals</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gcc</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hpcx</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    cmake</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    autoconf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    automake</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    binutils</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">curl</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gettext</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    libtool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    numactl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    openssl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    perl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 罗列我们要安装的软件包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">compilers</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'gcc@10.2.0'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">devtools</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    netcdf-cxx4@4.3.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    petsc@3.14.1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    python@3.7.9</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    py-numpy@1.19.4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    scorep@6.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 安装外部软件包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token for-or-select variable" style="color:#36acaa">i</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">${externals</span><span class="token string variable punctuation" style="color:#393A34">[</span><span class="token string variable" style="color:#36acaa">@</span><span class="token string variable punctuation" style="color:#393A34">]</span><span class="token string variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"external package: </span><span class="token string variable" style="color:#36acaa">$i</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    spack </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -ny --fail-fast </span><span class="token variable" style="color:#36acaa">$i</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">done</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 对于每个列出的编译器，安装我们需要的软件包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token for-or-select variable" style="color:#36acaa">c</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">${compilers</span><span class="token string variable punctuation" style="color:#393A34">[</span><span class="token string variable" style="color:#36acaa">@</span><span class="token string variable punctuation" style="color:#393A34">]</span><span class="token string variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> </span><span class="token for-or-select variable" style="color:#36acaa">i</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">${devtools</span><span class="token string variable punctuation" style="color:#393A34">[</span><span class="token string variable" style="color:#36acaa">@</span><span class="token string variable punctuation" style="color:#393A34">]</span><span class="token string variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">do</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"my package: </span><span class="token string variable" style="color:#36acaa">$i</span><span class="token string" style="color:#e3116c">%</span><span class="token string variable" style="color:#36acaa">$c</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        spack </span><span class="token function" style="color:#d73a49">install</span><span class="token plain"> -ny --fail-fast </span><span class="token variable" style="color:#36acaa">$i</span><span class="token plain">%</span><span class="token variable" style="color:#36acaa">$c</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">done</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">done</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>在这个脚本中，我们用 <code>for</code> 循环来逐个安装软件包，这样方便我们做一些额外的操作（比如打印提示信息）。执行完成后，所有软件和依赖都已正确安装，我们可以选择清理不必要的文件。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 清理可能存在的临时文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack clean</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 清理不必要的依赖项</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack gc</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="导出模块文件">导出模块文件<a class="hash-link" href="#导出模块文件" title="Direct link to heading">​</a></h2><p>使用 Spack 安装了软件包后，我们还只能用 <code>spack load</code> 加载。在实验室集群文档中有提到，这种加载方式比 <code>module load</code> 要慢很多，且与 <code>module load</code> 混用容易出问题。</p><p>由于我们不可避免地要使用超算 S 上的 Environment Modules，我们接下来把刚刚安装的所有软件包都导出为模块文件。为此，先调整配置文件，只允许一些软件包被导出为模块，同时修改一下模块的命名规则。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ spack config edit modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">modules:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  tcl:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    hash_length: </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    verbose: True</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    blacklist:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - autoconf</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - automake</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - </span><span class="token function" style="color:#d73a49">curl</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - gettext</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - libtool</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - numactl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - openssl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - openssh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - perl</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    all:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      conflict:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        - </span><span class="token string" style="color:#e3116c">'{name}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      environment:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        set:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token string" style="color:#e3116c">'{name}_ROOT'</span><span class="token builtin class-name">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'{prefix}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    projections:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      all:      </span><span class="token string" style="color:#e3116c">'{name}/{version}/{compiler.name}-{compiler.version}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      ^mpi:     </span><span class="token string" style="color:#e3116c">'{name}/{version}/{^mpi.name}-{^mpi.version}-{compiler.name}-{compiler.version}'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ^python:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      autoload: direct</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>该配置文件中各对象的含义如下：</p><ul><li><code>tcl</code>：表示我们接下来的配置都是针对 Tcl 模块文件的；</li><li><code>hash_length</code>：模块文件名称中 hash 值的长度；</li><li><code>verbose</code>：当模块有 <code>autoload</code> 指定的依赖时，输出提示信息；</li><li><code>blacklist</code>：禁止为这些模块生成文件，我们把 <code>/usr</code> 里找到的都屏蔽掉；</li><li><code>all</code>：对所有 Tcl 模块生效的设置；</li><li><code>conflict</code>：在模块文件中增加 <code>conflict</code>；</li><li><code>environment</code>：在模块文件中设置特定环境变量，在此我们设定诸如 <code>PETSC_ROOT</code> 之类的变量；</li><li><code>projections</code>：调整软件包到模块文件的映射规则；</li><li><code>autoload</code>：指明满足特定条件的模块需要加载的依赖，这里我们让所有依赖于 <code>python</code> 的模块都加载依赖项。</li></ul><p>配置完成后，执行命令来生成模块文件：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 清空以前的模块文件，生成新的模块文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack module tcl refresh --delete-tree</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>随后使用命令来启用 Spack 模块文件的路径，该路径可以在 <code>config.yaml</code> 中修改。在这里我们使用默认路径。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 启用模块搜索路径</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ module use </span><span class="token variable" style="color:#36acaa">$SPACK_ROOT</span><span class="token plain">/share/spack/modules</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 如果该路径底下还有以架构命名的目录，为了避免模块文件名过长，我们可以用以下命令</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># module use $SPACK_ROOT/share/spack/modules/linux-centos7-x86_64</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>模块文件的配置都完成后，我们就可以像加载超算 S 上已有的模块一样加载新安装的模块了。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="加载模块">加载模块<a class="hash-link" href="#加载模块" title="Direct link to heading">​</a></h2><p>我们可以直接用 <code>module load</code> 加载模块，但这种方式可能会让加载的模块缺少一些依赖。Spack v0.16.0 还不能很好地处理模块的依赖关系，我们要么修改 Spack 的模块文件 <code>templates</code>，要么就让 Spack 为我们生成加载模块用的命令。这里我们选择后者。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic"># 生成一个脚本，其中会包含很多module load命令</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">echo</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'#!/bin/bash'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> env.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack module tcl loads -r petsc py-numpy </span><span class="token operator" style="color:#393A34">&gt;&gt;</span><span class="token plain"> env.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> u+x env.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 加载petsc和py-numpy</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">source</span><span class="token plain"> ./env.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="附自定义软件包">附：自定义软件包<a class="hash-link" href="#附自定义软件包" title="Direct link to heading">​</a></h2><p>在添加外部软件包或者安装新软件包时，我们可能会遇到 Spack 不能识别的名称，比如 <code>hpcx</code>。遇到这种情况大致有以下几种处理方式：</p><ul><li>它可能叫不同名字，我们可以使用 <code>spack list</code> 按通配符搜索；</li><li>在 Spack 文档、GitHub 或其他网站上搜索该软件包的配置文件，找到了可以直接用；</li><li>自己定义该软件包。</li></ul><p>下面以 <code>hpcx</code> 为例演示如何自定义软件包并设置运行时的环境变量。假设超算 S 上安装的 <code>hpcx</code> 有如下目录结构：</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">hpcx/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|- gcc-10.2.0/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|- hcoll/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">|- sharp/</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">`- ucx/</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>简单起见，我们把 <code>hpcx</code> 当作基于 <code>openmpi</code> 的另一种 <code>mpi</code>，并且不考虑它的诸如 <code>ucx</code>、<code>hcoll</code> 之类的依赖项。考虑到我们只想要一个外部软件包，不会直接 build 它，我们要做的事情变得很简单：</p><ul><li>创建一个名为 <code>hpcx</code> 的 bundle package；</li><li>在 <code>package.py</code> 中，让 <code>hpcx</code> 依赖于 <code>openmpi</code>，并且提供 <code>mpi</code>；</li><li>在 <code>package.py</code> 中，设置 build、run 等各阶段所用的环境。</li></ul><p>首先是创建，在创建时要指明 repo 的位置以便于统一管理：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ spack create -r ~/public/repos/spack/ -t bundle -n hpcx</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>接着修改 <code>package.py</code>：</p><div class="codeBlockContainer_I0IT language-python theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-python codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">from</span><span class="token plain"> spack </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">Hpcx</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">BundlePackage</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token triple-quoted-string string" style="color:#e3116c">"""Mellanox HPC-X ScalableHPC Software Toolkit"""</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    homepage </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://www.mellanox.com/products/hpc-x-toolkit"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    executables </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'^ompi_info$'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    version</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'2.4.1'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    provides</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'mpi'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    provides</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'mpi@:3.0'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> when</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">'@2.0.0:'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    depends_on</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'openmpi'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setup_run_environment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> env</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">import</span><span class="token plain"> os</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Set user environment manually.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpcx_home       </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> os</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">path</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">dirname</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpcx_mpi_dir    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpcx_oshmem_dir </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpcx_hcoll_dir  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hpcx_home</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'hcoll'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpcx_sharp_dir  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hpcx_home</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'sharp'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        hpcx_ucx_dir    </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">hpcx_home</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'ucx'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> d </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">hpcx_hcoll_dir</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_sharp_dir</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_ucx_dir</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prepend_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'PATH'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">            join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'bin'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prepend_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'CPATH'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">           join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'include'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prepend_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'LIBRARY_PATH'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">    join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'lib'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prepend_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'LD_LIBRARY_PATH'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">d</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'lib'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Dependency directories</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'HPCX_HCOLL_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_hcoll_dir</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'HPCX_SHARP_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_sharp_dir</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'HPCX_UCX_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">   hpcx_ucx_dir</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Home directories</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        homes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'HPCX_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'HPCX_HOME'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> home </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> homes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">home</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_home</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        mpi_homes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'HPCX_MPI_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'HPCX_MPI_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'OMPI_HOME'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MPI_HOME'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> mpi_home </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> mpi_homes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">mpi_home</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_mpi_dir</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        oshmem_homes </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'HPCX_OSHMEM_DIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'OSHMEM_HOME'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SHMEM_HOME'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> oshmem_home </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> oshmem_homes</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">oshmem_home</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> hpcx_oshmem_dir</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Because MPI is both a runtime and a compiler, we have to setup the</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># compiler components as part of the run environment.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPICC'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpicc'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPICXX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpic++'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPIF77'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpif77'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPIF90'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpif90'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setup_dependent_build_environment</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> env</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dependent_spec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Duplicate environment variables to avoid Spack warnings.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPICC'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpicc'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPICXX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpic++'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPIF77'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpif77'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'MPIF90'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpif90'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Use the spack compiler wrappers under MPI</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'OMPI_CC'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  spack_cc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'OMPI_CXX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> spack_cxx</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'OMPI_FC'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain">  spack_fc</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'OMPI_F77'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> spack_f77</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># See https://www.open-mpi.org/faq/?category=building#installdirs</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> suffix </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token string" style="color:#e3116c">'PREFIX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'EXEC_PREFIX'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'BINDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SBINDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token string" style="color:#e3116c">'LIBEXECDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'DATAROOTDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'DATADIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'SYSCONFDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token string" style="color:#e3116c">'SHAREDSTATEDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'LOCALSTATEDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'LIBDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token string" style="color:#e3116c">'INCLUDEDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'INFODIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'MANDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'PKGDATADIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                       </span><span class="token string" style="color:#e3116c">'PKGLIBDIR'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'PKGINCLUDEDIR'</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            env</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">unset</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'OPAL_%s'</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">%</span><span class="token plain"> suffix</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">def</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setup_dependent_package</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> module</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> dependent_spec</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mpicc  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpicc'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mpicxx </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpic++'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mpifc  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpif90'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mpif77 </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">bin</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'mpif77'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">spec</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">mpicxx_shared_libs </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lib</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'libmpi_cxx.{0}'</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dso_suffix</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            join_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">prefix</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">lib</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'libmpi.{0}'</span><span class="token punctuation" style="color:#393A34">.</span><span class="token builtin">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">dso_suffix</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">]</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>在这个配置文件中，我们增加了一些语句让 <code>hpcx</code> 能像 <code>openmpi</code> 一样被使用。其中：</p><ul><li><code>executables</code> 用于提供可执行文件让 Spack 能够识别；</li><li><code>provides</code> 用于提供 virtual package 给其他软件包使用；</li><li><code>env</code> 是表示用户环境的对象，可以操作环境变量；</li><li><code>setup_run_environment</code> 是设置 runtime 环境的方法，在加载、卸载 <code>hpcx</code> 时会被执行；</li><li><code>setup_dependent_build_environment</code> 是设置 build-time 环境的方法，会影响依赖于 <code>hpcx</code> 的软件包；</li><li><code>setup_dependent_package</code> 也是设置 build-time 环境的方法，影响依赖于 <code>hpcx</code> 的软件包。</li></ul><p>在 <code>setup_run_environment</code> 中我们设置了很多环境变量，如果还有其他与超算 S 网络相关的环境需要设置，也可以添加在该方法中。</p><div class="admonition admonition-note alert alert--secondary"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="14" height="16" viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</h5></div><div class="admonition-content"><p>这里配置的 <code>hpcx</code> 是给外部软件包使用的，所以里面没有给定其他依赖项。</p></div></div>]]></content>
        <author>
            <name>one</name>
            <uri>https://github.com/alephpiece</uri>
        </author>
        <category label="tutorial" term="tutorial"/>
        <category label="spack" term="spack"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[实用工具：Terminal Multiplexers]]></title>
        <id>one-terminal-multiplexers</id>
        <link href="https://hpcdoc.pages.hpcer.dev/cluster-docs/blog/one-terminal-multiplexers"/>
        <updated>2020-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[使用实验室集群时，我们可能偶尔会遇到断开连接的情况，可能是主动断开SSH，也可能是网络不稳定。无论怎样，重新连接后不会自动恢复上一次的工作（所在的路径、环境变量、打开的文件等）。]]></summary>
        <content type="html"><![CDATA[<p>使用实验室集群时，我们可能偶尔会遇到断开连接的情况，可能是主动断开SSH，也可能是网络不稳定。无论怎样，重新连接后不会自动恢复上一次的工作（所在的路径、环境变量、打开的文件等）。</p><p>为了保存工作，便于重连后继续，我们可以让自己的程序或者 shell 在后台一直运行。保持程序后台运行的方式/工具有很多，本文简单介绍以下几种：</p><ul><li><code>nohup</code> 和 <code>&amp;</code></li><li><code>screen</code></li><li><code>tmux</code></li></ul><h2 class="anchor anchorWithStickyNavbar_mojV" id="后台运行程序nohup-和-">后台运行程序：nohup 和 &amp;<a class="hash-link" href="#后台运行程序nohup-和-" title="Direct link to heading">​</a></h2><p>参考：</p><ul><li><a href="https://en.wikipedia.org/wiki/Nohup" target="_blank" rel="noopener noreferrer">Wikipedia - nohup</a></li></ul><p>Linux上常用的后台执行程序的命令是 <code>nohup</code>，它的功能是无视 hangup 信号，也就是在 shell 退出时不会自动被挂断。该命令默认会把原本到标准输出的东西重定向到一个文件。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">nohup</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> nodedata</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">nohup: ignoring input and appending output to ‘nohup.out’</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>执行该命令后，退出 shell 不会中断它。实际上，它已经不再依赖于任何 pts 了。不过，我们直接在当前shell执行后（<em>foreground</em>），把自己的 shell 也阻塞了，因此我们要把程序放在后台（<em>background</em>）。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> nodedata </span><span class="token operator" style="color:#393A34">&amp;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>执行该命令后，会产生一个 subshell 来执行 <code>ping nodedata</code>，输出仍然是标准输出，所以会出现这样的情况：屏幕不断地打印东西出来，但自己还是能正常敲其他命令。</p><p>作为后台运行的进程，直接用组合键 <code>Control + c</code> 是无法终止的。通常有两种方法用于终止一个后台执行的程序：</p><ul><li>用 <code>ps</code> 找到进程号，用 <code>kill</code> 直接发送终止信号；</li><li>用 <code>fg</code> 把后台程序调到到前面，再 <code>Control + c</code> 终止。</li></ul><p>了解 <code>nohup</code> 和 <code>&amp;</code> 以后，我们可以组合两者，实现后台运行一个不依赖于当前 shell 的程序。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">nohup</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ping</span><span class="token plain"> nodedata </span><span class="token operator" style="color:#393A34">&amp;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>执行该命令后，仍然可以在当前shell做其他事情，因为 <code>&amp;</code> 把程序转入后台，而 <code>nohup</code> 重定向了输出。也可以立马退出，因为 <code>nohup</code> 会无视SIGHUP信号。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="terminal-multiplexers">Terminal multiplexers<a class="hash-link" href="#terminal-multiplexers" title="Direct link to heading">​</a></h2><p>参考：</p><ul><li><a href="https://en.wikipedia.org/wiki/Terminal_multiplexer" target="_blank" rel="noopener noreferrer">Wikipedia - Terminal multiplexer</a></li></ul><p>终端多路复用器（terminal multiplexers）就是一种创建多个伪终端（会话）的程序，达到类似于“多路复用”的状态。相比于 <code>nohup</code> 通常只用于跑单个程序，我们使用 multiplexer 可以很容易地在一个登录的终端中管理大量会话，每个会话都有自己的shell。</p><p>一个会话通常有 <em>attached</em> 和 <em>detached</em> 两种状态，attached 表示有某个 shell 正在使用它（可以同时从多个 shell 进入同一会话），detached 表示它没被使用。</p><p>处于一个会话中时，通常要使用组合键来向 multiplexer 发送命令，见后续介绍。在会话中，用户可以使用的组合键通常都非常丰富，可以实现在同一会话中创建多个窗口、分屏等操作。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="screen">screen<a class="hash-link" href="#screen" title="Direct link to heading">​</a></h3><p><code>screen</code> 是Linux通常会带的 multiplexer。创建并进入会话后，所有发给 <code>screen</code> 的命令都由组合键 <code>Control + a</code> 开头。例如：</p><table><thead><tr><th>组合键</th><th>功能</th></tr></thead><tbody><tr><td>Control + a + ?</td><td>查看在<code>screen</code>会话中可使用的key bindings</td></tr><tr><td>Control + a + d</td><td>detach，把当前会话挂在后台</td></tr></tbody></table><p>实际操作的例子如下：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## 以detached模式创建一个有名字的会话</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">screen</span><span class="token plain"> -dmS </span><span class="token builtin class-name">test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 创建另一个有名字的会话，并立即使用（attach）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">screen</span><span class="token plain"> -S develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 列出所有存在的会话和状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">screen</span><span class="token plain"> -ls</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">There are screens on:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">26426</span><span class="token plain">.develop   </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Attached</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token number" style="color:#36acaa">26348</span><span class="token plain">.test      </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">Detached</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token number" style="color:#36acaa">2</span><span class="token plain"> Sockets </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> /var/run/screen/S-one.</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## detach当前会话，退回到最初的shell</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Control + a + d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 进入另一个会话（reattach）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">screen</span><span class="token plain"> -r </span><span class="token builtin class-name">test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 假设网络突然中断，又或者我们想在另一台电脑上继续之前的工作</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 只需要登录后执行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">screen</span><span class="token plain"> -r develop</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="tmux">tmux<a class="hash-link" href="#tmux" title="Direct link to heading">​</a></h3><p>参考：</p><ul><li><p><a href="https://github.com/tmux/tmux/wiki" target="_blank" rel="noopener noreferrer">Tmux Wiki</a></p></li><li><p><a href="https://tmuxcheatsheet.com/" target="_blank" rel="noopener noreferrer">Tmux Cheat Sheet &amp; Quick Reference</a></p></li></ul><p><code>tmux</code> 是一个比 <code>screen</code> 功能更全面的 multiplexer，但它们的基本用法差不多。创建并进入会话后，所有发给 <code>screen</code> 的命令都由组合键 <code>Control + b</code> 开头。例如：</p><table><thead><tr><th>组合键</th><th>功能</th></tr></thead><tbody><tr><td>Control + b + ?</td><td>查看在<code>tmux</code>会话中可使用的key bindings和命令</td></tr><tr><td>Control + b + d</td><td>detach，把当前会话挂在后台</td></tr><tr><td>Control + b + :</td><td>发送命令到<code>tmux</code>，每个组合键的功能都可以用命令完成</td></tr><tr><td>Control + b + c</td><td>在当前会话创建新的window</td></tr><tr><td>Control + b + n/p</td><td>切换到前一个/后一个window</td></tr><tr><td>Control + b + w</td><td>列出现存的windows，可用键盘上/下键选择</td></tr></tbody></table><p>实际操作的例子如下：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## 以detached模式创建一个有名字的会话</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux new-session -ds </span><span class="token builtin class-name">test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 创建另一个有名字的会话，并立即使用（attach）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux new-session -s develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 列出所有存在的会话和状态</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux </span><span class="token function" style="color:#d73a49">ls</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">test: </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> windows</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">develop: </span><span class="token number" style="color:#36acaa">1</span><span class="token plain"> windows </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">attached</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## detach当前会话，退回到最初的shell</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Control + b + d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 进入另一个会话（reattach）</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux attach -t </span><span class="token builtin class-name">test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 假设网络突然中断，又或者我们想在另一台电脑上继续之前的工作</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 只需要登录后执行</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux attach -t develop</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="保持ssh或sftp连接">保持SSH或SFTP连接<a class="hash-link" href="#保持ssh或sftp连接" title="Direct link to heading">​</a></h2><p>当我们使用集群时，使用 <code>screen</code> 或 <code>tmux</code> 这样的程序能让我们保存当前的工作以便下次继续。如果出于某种理由我们不希望反复登录集群（比如需要动态口令），那就需要保存已登录的 shell，也就是在 multiplexer 打开的会话里面登录集群。</p><p>例如，我们想在实验室机器上创建会话，在这个会话里面打开一个SSH和一个SFTP到某超算S。假设超算域名是 <code>s.example.cn</code>，端口是 <code>12345</code>，我的用户名是 <code>hpcer</code>。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## 首先从自己电脑登录实验室集群</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> hpcer@ssh.hpcer.dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 创建一个tmux会话用于SSH</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux new-session -s myssh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 在myssh会话中连接超算S</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">ssh</span><span class="token plain"> -o </span><span class="token assign-left variable" style="color:#36acaa">ServerAliveInterval</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">60</span><span class="token plain"> -p </span><span class="token number" style="color:#36acaa">12345</span><span class="token plain"> hpcer@s.example.cn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 用组合键detach当前会话</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Control + b + d</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 创建另一个tmux会话用于SFTP</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ tmux new-session -s mysftp</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 在mysftp会话中连接超算S</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">sftp</span><span class="token plain"> -o </span><span class="token assign-left variable" style="color:#36acaa">ServerAliveInterval</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">60</span><span class="token plain"> -P </span><span class="token number" style="color:#36acaa">12345</span><span class="token plain"> hpcer@s.example.cn</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 用组合键detach当前会话</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Control + b + d </span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>创建了上述两个会话后，只要实验室集群到超算S的连接不断开，我们随时都可以通过 <code>tmux</code> 会话回到超算S，不需要反复登录。如果实验室集群到超算S的连接也不稳定，可以换其他不在校园网的机器。</p>]]></content>
        <author>
            <name>one</name>
            <uri>https://github.com/alephpiece</uri>
        </author>
        <category label="tool" term="tool"/>
        <category label="screen" term="screen"/>
        <category label="tmux" term="tmux"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[使用集群上安装的BOUT++库]]></title>
        <id>one-bout-dev-usage</id>
        <link href="https://hpcdoc.pages.hpcer.dev/cluster-docs/blog/one-bout-dev-usage"/>
        <updated>2020-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[本文演示了如何使用实验室集群上安装的BOUT++。]]></summary>
        <content type="html"><![CDATA[<p>本文演示了如何使用实验室集群上安装的BOUT++。</p><p>使用已安装的某版本BOUT++库：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ spack load bout-dev ~openmp+scorep</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>使用BOUT++的依赖，但不包括BOUT++库本身：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ spack load --only dependencies ~openmp+scorep</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>查看当前BOUT++的配置：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ bout-config --all</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="链接集群上已安装的bout库">链接集群上已安装的BOUT++库<a class="hash-link" href="#链接集群上已安装的bout库" title="Direct link to heading">​</a></h2><p>BOUT++通常需要开发者在源代码目录下编译，也就是<em>in-source build</em>。完成build后有以下几个比较重要的文件：</p><ul><li><code>lib/libbout++.a</code>：BOUT++的静态库，默认是没有共享库的；</li><li><code>bin/bout-config</code>：打印BOUT++配置信息的脚本，比如库的路径、编译器路径等；</li><li><code>make.config</code>：编译BOUT++算例用的makefile，包含头文件和库路径、编译flags等。</li></ul><p>随后我们可以进到算例的目录下，直接调<code>make</code>来编译算例得到可执行文件，例如</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">cd</span><span class="token plain"> examples/conduction</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">make</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>算例目录下的makefile会将BOUT++的根目录<code>BOUT_TOP</code>设置为当前源代码的根目录，然后调<code>make.config</code>完成后续工作。</p><p><code>make.config</code>中的关键变量是在用户配置BOUT++的过程中设置的，和实验室集群上安装的BOUT++不一样。因此，要链接集群上安装的BOUT++库，我们就不能直接用算例目录下现有的makefile，需要按照BOUT++官网的说明修改makefile。</p><p>以<code>examples/conduction/makefile</code>为例链接实验室集群上安装的BOUT++库：</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## 加载Spack环境</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">source</span><span class="token plain"> /apps/spack/share/spack/setup-env.sh</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 加载BOUT++，如果有多个BOUT++包，请按照集群文档中Spack使用说明来筛选</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 最终提交脚本到集群运行算例时，也要用这一句来加载环境</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack load bout-dev +openmp+scorep</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 目前，在集群上安装的BOUT++至少有OpenMP和非OpenMP两个版本</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## spack load bout-dev ~openmp+scorep</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 进入自己下载的BOUT++算例目录</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">cd</span><span class="token plain"> BOUT-dev/examples/conduction</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 修改makefile，新makefile的例子在examples/make-script中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">sed</span><span class="token plain"> -e </span><span class="token string" style="color:#e3116c">'s/test.cxx/conduction.cxx/g'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">/make-script/makefile </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> makefile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 创建可执行文件</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token function" style="color:#d73a49">make</span><span class="token plain"> clean </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>执行上述命令后，我们就得到了算例的可执行文件<code>conduction</code>。</p><p>若要使用BOUT++源代码目录下的Python包，有两种选择：用自己下载的，或用集群上已安装的。自己下载的可参考文后的链接。下面演示如何使用集群上已有的。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## 加载集群的BOUT++包</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack load bout-dev +openmp+scorep</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 使用bout-config获取Python包路径并添加到环境变量中</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">PYTHONPATH</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable" style="color:#36acaa">bout-config --python</span><span class="token variable" style="color:#36acaa">)</span><span class="token builtin class-name">:</span><span class="token variable" style="color:#36acaa">$PYTHONPATH</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>执行上述命令后，便可在使用Python时导入BOUT++的Python包。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="使用集群上安装的依赖项编译bout">使用集群上安装的依赖项编译BOUT++<a class="hash-link" href="#使用集群上安装的依赖项编译bout" title="Direct link to heading">​</a></h2><p>当我们想重新编译BOUT++时，可以使用集群上安装的BOUT++依赖项，通常不需要自己再次安装。涉及Spack的操作可参考集群文档中Spack的说明。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">## 加载BOUT++的依赖项，但不加载BOUT++本身</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ spack load --only dependencies bout-dev ~openmp+scorep</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 进入自己下载的BOUT++目录</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">cd</span><span class="token plain"> BOUT-dev</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">## 按照自己的需要完成build</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ ./configure --with-petsc --with-sundials </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">make</span><span class="token plain"> -j16</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><h2 class="anchor anchorWithStickyNavbar_mojV" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="Direct link to heading">​</a></h2><ul><li><a href="https://bout-dev.readthedocs.io/en/latest/user_docs/installing.html" target="_blank" rel="noopener noreferrer">BOUT++ - Getting started</a></li><li><a href="https://bout-dev.readthedocs.io/en/latest/user_docs/installing.html#python-configuration" target="_blank" rel="noopener noreferrer">BOUT++ - Python configuration</a></li><li><a href="https://bout-dev.readthedocs.io/en/latest/user_docs/installing.html#installing-bout-experimental" target="_blank" rel="noopener noreferrer">BOUT++ - Installing BOUT++(experimental)</a></li></ul>]]></content>
        <author>
            <name>one</name>
            <uri>https://github.com/alephpiece</uri>
        </author>
        <category label="tutorial" term="tutorial"/>
        <category label="bout++" term="bout++"/>
        <category label="spack" term="spack"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[切换Spack环境变量]]></title>
        <id>one-reset-spack-env</id>
        <link href="https://hpcdoc.pages.hpcer.dev/cluster-docs/blog/one-reset-spack-env"/>
        <updated>2020-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Spack的环境变量、自动补全等都由Spack目录下的脚本设置。例如，为bash设置环境变量的命令为]]></summary>
        <content type="html"><![CDATA[<p>Spack的环境变量、自动补全等都由Spack目录下的脚本设置。例如，为bash设置环境变量的命令为</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">SPACK_ROOT</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/path/to/spack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">source</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$SPACK_ROOT</span><span class="token plain">/share/spack/setup-env.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>当我们有多个Spack时，直接<code>source</code>其中一个Spack的环境配置脚本可能不会达到预期效果。比如，首先加载了集群的公共Spack，随后切换到自己的本地Spack，实际上仍有些环境是公共Spack设置的。此时我们需要清除一下旧的环境。</p><blockquote><p>以下均以bash为例。</p></blockquote><h2 class="anchor anchorWithStickyNavbar_mojV" id="spack的环境变量">Spack的环境变量<a class="hash-link" href="#spack的环境变量" title="Direct link to heading">​</a></h2><p>Spack的环境配置脚本<code>setup-env.sh</code>实际上会如下修改用户的环境：</p><ul><li>修改变量<code>SPACK_ROOT</code>；</li><li>修改变量<code>PATH</code>，添加<code>$SPACK_ROOT/bin</code>，但该目录已存在时会跳过修改；</li><li>定义函数<code>_spack_shell_wrapper</code>，是处理Spack命令的函数；</li><li>定义函数<code>spack</code>，是给用户使用的。</li></ul><p>如果以上环境都已被设置，再<code>source</code>另一个路径下的Spack，很可能只有<code>SPACK_ROOT</code>被修改。此时用户使用<code>which spack</code>等命令都只能找到旧的变量和函数。尤其是，如果<code>PATH</code>没有正确被修改，用户实际执行的可执行文件仍然来自于旧路径。</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="重置spack的环境">重置Spack的环境<a class="hash-link" href="#重置spack的环境" title="Direct link to heading">​</a></h2><p>切换Spack最干净的方法就是重新开shell，重新<code>source</code>配置脚本。如果一定要在当前shell切换Spack，可以手动删除旧的环境变量<code>PATH</code>和函数<code>_spack_shell_wrapper</code>、<code>spack</code>。如果Spack版本差的不多，实际上只需要修改<code>PATH</code>就差不多能正常使用。</p><p>下面提供一个可以删除这些环境的脚本。该脚本的输入参数为Spack的<code>setup-env.sh</code>路径。</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">#   Script:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#       reset-env.sh</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#   Usage:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#       source ./reset-env.sh /path/to/setup-env.sh</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token function-name function" style="color:#d73a49">unset_spack_path</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic"># Figure out Spack paths</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">local</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">spack_script</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token builtin class-name">local</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">spack_share_dir</span><span class="token operator" style="color:#393A34">=</span><span class="token string" style="color:#e3116c">"$(cd "</span><span class="token string variable" style="color:#36acaa">$(</span><span class="token string variable function" style="color:#d73a49">dirname</span><span class="token string variable" style="color:#36acaa"> $spack_script</span><span class="token string variable" style="color:#36acaa">)</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/null </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token builtin class-name">pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    local spack_prefix="</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable builtin class-name" style="color:#36acaa">cd</span><span class="token variable" style="color:#36acaa"> "</span><span class="token variable punctuation" style="color:#393A34">$(</span><span class="token variable" style="color:#36acaa">dirname </span><span class="token variable punctuation" style="color:#393A34">$(</span><span class="token variable" style="color:#36acaa">dirname $spack_share_dir</span><span class="token variable punctuation" style="color:#393A34">)</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain">" </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> /dev/null </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token builtin class-name">pwd</span><span class="token punctuation" style="color:#393A34">)</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    local spack_bin="</span><span class="token variable" style="color:#36acaa">${spack_prefix</span><span class="token variable operator" style="color:#393A34">%</span><span class="token variable operator" style="color:#393A34">/</span><span class="token variable" style="color:#36acaa">}</span><span class="token plain">/bin</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    # Remove the specified directory from PATH</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    local path_old=</span><span class="token string environment constant" style="color:#36acaa">$PATH</span><span class="token string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    local path_canonical="</span><span class="token builtin class-name">:</span><span class="token variable" style="color:#36acaa">$path_old</span><span class="token builtin class-name">:</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    if [[ "</span><span class="token variable" style="color:#36acaa">$path_canonical</span><span class="token string" style="color:#e3116c">" =~ "</span><span class="token builtin class-name">:</span><span class="token variable" style="color:#36acaa">$spack_bin</span><span class="token builtin class-name">:</span><span class="token string" style="color:#e3116c">" ]];</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    then</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        # Remove the given directory</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        local path_new="</span><span class="token variable" style="color:#36acaa">${spack_bin}</span><span class="token variable" style="color:#36acaa">${path_canonical</span><span class="token variable operator" style="color:#393A34">/</span><span class="token variable operator" style="color:#393A34">/</span><span class="token variable operator" style="color:#393A34">:</span><span class="token variable" style="color:#36acaa">$spack_bin</span><span class="token variable operator" style="color:#393A34">:</span><span class="token variable operator" style="color:#393A34">/</span><span class="token variable operator" style="color:#393A34">:</span><span class="token variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        # Remove the tail colon</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        path_new=</span><span class="token string variable" style="color:#36acaa">${path_new</span><span class="token string variable operator" style="color:#393A34">%</span><span class="token string variable operator" style="color:#393A34">:</span><span class="token string variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        # Export PATH, this will change the user environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        export PATH=</span><span class="token string variable" style="color:#36acaa">$path_new</span><span class="token string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        echo "</span><span class="token plain">removed from </span><span class="token environment constant" style="color:#36acaa">PATH</span><span class="token builtin class-name">:</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$spack_bin</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    else</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        echo "</span><span class="token plain">removed nothing</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">unset_spack_func() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    # Spack functions</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    local spack_functions=(spack _spack_shell_wrapper)</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    for i in "</span><span class="token variable" style="color:#36acaa">${spack_functions</span><span class="token variable punctuation" style="color:#393A34">[</span><span class="token variable" style="color:#36acaa">@</span><span class="token variable punctuation" style="color:#393A34">]</span><span class="token variable" style="color:#36acaa">}</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    do</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        if [ -n </span><span class="token string variable" style="color:#36acaa">$i</span><span class="token string" style="color:#e3116c"> ] &amp;&amp; [ "</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable builtin class-name" style="color:#36acaa">type</span><span class="token variable" style="color:#36acaa"> -t $i</span><span class="token variable" style="color:#36acaa">)</span><span class="token string" style="color:#e3116c">" = function ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        then</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">            # This is supposed to change the user environment</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">            unset -f </span><span class="token string variable" style="color:#36acaa">$i</span><span class="token string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">            echo "</span><span class="token builtin class-name">unset</span><span class="token plain"> function: </span><span class="token variable" style="color:#36acaa">$i</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        else</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">            echo "</span><span class="token variable" style="color:#36acaa">$i</span><span class="token plain"> not found</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">        fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    done</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">echo -e "</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">nRemoving Spack directory from </span><span class="token environment constant" style="color:#36acaa">PATH</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">unset_spack_path "</span><span class="token variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">echo -e "</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">nUnsetting Spack functions</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">unset_spack_func</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">echo -e "</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">nSourcing </span><span class="token variable" style="color:#36acaa">${1}</span><span class="token punctuation" style="color:#393A34">..</span><span class="token plain">.</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">source "</span><span class="token variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">" &amp;&gt; /dev/null</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">if [ </span><span class="token string variable" style="color:#36acaa">$?</span><span class="token string" style="color:#e3116c"> != 0 ]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">    echo "</span><span class="token plain">failed to </span><span class="token builtin class-name">source</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$1</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="display:inline-block;color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">echo -e "</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">nNow, you can run following commands </span><span class="token keyword" style="color:#00009f">for</span><span class="token plain"> checking</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">echo -e "</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">t$ </span><span class="token function" style="color:#d73a49">which</span><span class="token plain"> spack</span><span class="token string" style="color:#e3116c">"</span><br></span><span class="token-line" style="color:#393A34"><span class="token string" style="color:#e3116c">echo -e "</span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain">t$ </span><span class="token function" style="color:#d73a49">env</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">grep</span><span class="token plain"> -i spack"</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>该脚本需要<code>source</code>，使用方式如下</p><div class="codeBlockContainer_I0IT language-bash theme-code-block"><div class="codeBlockContent_wNvx" style="color:#393A34;background-color:#f6f8fa"><pre tabindex="0" class="prism-code language-bash codeBlock_jd64 thin-scrollbar"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token builtin class-name">export</span><span class="token plain"> </span><span class="token assign-left variable" style="color:#36acaa">SPACK_ROOT</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">/path/to/new/spack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">$ </span><span class="token builtin class-name">source</span><span class="token plain"> ./reset-env.sh </span><span class="token variable" style="color:#36acaa">$SPACK_ROOT</span><span class="token plain">/share/spack/setup-env.sh</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" title="Copy" class="copyButton_eDfN clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div><p>脚本中的<code>unset_spack_path</code>用于计算一些路径并修改用户的<code>PATH</code>，执行完后，用户提供的新Spack的路径会并加到<code>PATH</code>最前面。<code>unset_spack_func</code>用于清除旧的函数。</p>]]></content>
        <author>
            <name>one</name>
            <uri>https://github.com/alephpiece</uri>
        </author>
        <category label="tutorial" term="tutorial"/>
        <category label="spack" term="spack"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些有用的参考资料]]></title>
        <id>helpful-links</id>
        <link href="https://hpcdoc.pages.hpcer.dev/cluster-docs/blog/helpful-links"/>
        <updated>2020-11-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[这里提供一些有用的参考资料, 主要是关于 Slurm 系统、Linux、DCU/GPU、编译调试相关的内容。]]></summary>
        <content type="html"><![CDATA[<p>这里提供一些有用的参考资料, 主要是关于 Slurm 系统、Linux、DCU/GPU、编译调试相关的内容。<br>
<!-- -->相关资料会不定期更新。</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="hpc-理论">HPC 理论<a class="hash-link" href="#hpc-理论" title="Direct link to heading">​</a></h3><ul><li><a href="https://computing.llnl.gov/tutorials/parallel_comp/" target="_blank" rel="noopener noreferrer">Introduction to Parallel Computing</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="slurm">Slurm<a class="hash-link" href="#slurm" title="Direct link to heading">​</a></h3><ul><li><a href="https://www.hpccube.com/wiki/index.php/SLURM%E4%BD%BF%E7%94%A8%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B" target="_blank" rel="noopener noreferrer">SLURM调度器基础教程: 曙光先进计算</a></li><li><a href="https://curc.readthedocs.io/en/latest/running-jobs/slurm-commands.html" target="_blank" rel="noopener noreferrer">Research Computing University of Colorado Boulder</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="linux">Linux<a class="hash-link" href="#linux" title="Direct link to heading">​</a></h3><ul><li><a href="https://man.linuxde.net" target="_blank" rel="noopener noreferrer">Linux命令大全</a></li><li><a href="https://linux.vbird.org" target="_blank" rel="noopener noreferrer">鳥哥的 Linux 私房菜</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="调试">调试<a class="hash-link" href="#调试" title="Direct link to heading">​</a></h3><ul><li><a href="https://lldb.llvm.org/use/map.html" target="_blank" rel="noopener noreferrer">GDB to LLDB command map</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="编辑器">编辑器<a class="hash-link" href="#编辑器" title="Direct link to heading">​</a></h3><ul><li><a href="https://github.com/wsdjeg/vim-galore-zh_cn" target="_blank" rel="noopener noreferrer">Vim 从入门到精通-中文</a></li><li><a href="https://github.com/iggredible/Learn-Vim" target="_blank" rel="noopener noreferrer">Learn-Vim</a></li></ul><h3 class="anchor anchorWithStickyNavbar_mojV" id="相关链接">相关链接<a class="hash-link" href="#相关链接" title="Direct link to heading">​</a></h3><ul><li><a href="https://docs.hpc.sjtu.edu.cn" target="_blank" rel="noopener noreferrer">上海交通大学 Pi 超算集群文档</a></li></ul>]]></content>
        <author>
            <name>genshen</name>
            <uri>https://github.com/genshen</uri>
        </author>
        <category label="hello" term="hello"/>
    </entry>
</feed>